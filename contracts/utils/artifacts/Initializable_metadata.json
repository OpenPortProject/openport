{
	"compiler": {
		"version": "0.6.12+commit.5ef660b1"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"_initialized": {
					"details": "Indicates that the contract has been initialized."
				},
				"_initializing": {
					"details": "Indicates that the contract is in the process of being initialized."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"utils/Initializable.sol": "Initializable"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"utils/Initializable.sol": {
			"keccak256": "0x48755462a999d363b878760e9c73e4aa203fc638816246cf3504ae676b1de37c",
			"license": "MIT",
			"urls": [
				"bzz-raw://1d0bdf1618d496864da2a73748ad6364d5db872c137e7c1e27a1797b9ee6ff75",
				"dweb:/ipfs/QmeUF8RFgzJgpVeCo6Q9hQtjHEEU6h8GnhFDAPXNyAeVg9"
			]
		}
	},
	"version": 1
}